<?xml version="1.0" encoding="utf-8"?>
<resources>

    <string name="app_name">FragmentModular</string>
    <string name="hello_world">Hello world!</string>
    <string name="action_settings">Settings</string>
    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="title_activity_second">SecondActivity</string>
    <string-array name="titles">
        <item>Activity</item>
        <item>Service</item>
        <item>ContentProvider</item>
        <item>BroadcastReceiver</item>
    </string-array>

    <string-array name="values">
        <item>An activity is a single, focused thing that the user can do. Almost all activities interact with the user, so the Activity class takes care of creating a window for you in which you can place your UI with setContentView(View). While activities are often presented to the user as full-screen windows, they can also be used in other ways: as floating windows (via a theme with windowIsFloating set) or embedded inside of another activity (using ActivityGroup). There are two methods almost all subclasses of Activity will implement:</item>
        <item>A Service is an application component representing either an application\'s desire to perform a longer-running operation while not interacting with the user or to supply functionality for other applications to use. Each service class must have a corresponding declaration in its package\'s AndroidManifest.xml. Services can be started with Context.startService() and Context.bindService().</item>
        <item>Content providers are one of the primary building blocks of Android applications, providing content to applications. They encapsulate data and provide it to applications through the single ContentResolver interface. A content provider is only required if you need to share data between multiple applications. For example, the contacts data is used by multiple applications and must be stored in a content provider. If you don\'t need to share data amongst multiple applications you can use a database directly via SQLiteDatabase.</item>
        <item>If you don\'t need to send broadcasts across applications, consider using this class with LocalBroadcastManager instead of the more general facilities described below. This will give you a much more efficient implementation (no cross-process communication needed) and allow you to avoid thinking about any security issues related to other applications being able to receive or send your broadcasts.</item>
    </string-array>

</resources>
